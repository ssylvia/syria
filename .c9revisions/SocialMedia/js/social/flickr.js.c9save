{"ts":1357943959744,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"require([\r\n    \"dojo/_base/declare\",\r\n    \"dojo/_base/connect\",\r\n    \"dojo/_base/array\",\r\n    \"dojo/_base/lang\",\r\n    \"dojo/_base/event\",\r\n    \"dojo/io-query\",\r\n    \"dojo/date/locale\",\r\n    \"esri\", // We're not directly using anything defined in esri.js but geometry, locator and utils are not AMD. So, the only way to get reference to esri object is through esri module (ie. esri/main)\r\n    \"esri/geometry\",\r\n    \"esri/utils\"\r\n],\r\nfunction (declare, connect, arr, lang, event, ioQuery, locale, esri) {\r\n    var Widget = declare(\"social.flickr\", null, {\r\n        constructor: function (options) {\r\n            var _self = this;\r\n            this.options = {\r\n                filterUsers: [],\r\n                filterWords: [],\r\n                autopage: true,\r\n                maxpage: 6,\r\n                limit: 100,\r\n                title: '',\r\n                id: 'flickr',\r\n                searchTerm: '',\r\n                symbolUrl: '',\r\n                symbolHeight: 22.5,\r\n                symbolWidth: 18.75,\r\n                popupHeight: 200,\r\n                popupWidth: 290,\r\n                dateFrom: '',\r\n                dateTo: '',\r\n                apikey: ''\r\n            };\r\n            declare.safeMixin(this.options, options);\r\n            if (this.options.map === null) {\r\n                throw 'Reference to esri.Map object required';\r\n            }\r\n            if (location.protocol === \"https:\") {\r\n                this.baseurl = \"http://api.flickr.com/services/rest/\";\r\n            } else {\r\n                this.baseurl = \"https://secure.flickr.com/services/rest/\";\r\n            }\r\n            this.featureCollection = {\r\n                layerDefinition: {\r\n                    \"geometryType\": \"esriGeometryPoint\",\r\n                    \"drawingInfo\": {\r\n                        \"renderer\": {\r\n                            \"type\": \"simple\",\r\n                            \"symbol\": {\r\n                                \"type\": \"esriPMS\",\r\n                                \"url\": this.options.symbolUrl,\r\n                                \"contentType\": \"image/\" + this.options.symbolUrl.substring(this.options.symbolUrl.lastIndexOf(\".\") + 1),\r\n                                \"width\": this.options.symbolWidth,\r\n                                \"height\": this.options.symbolHeight\r\n                            }\r\n                        }\r\n                    },\r\n                    \"fields\": [{\r\n                        \"name\": \"OBJECTID\",\r\n                        \"type\": \"esriFieldTypeOID\"\r\n                    }, {\r\n                        \"name\": \"smType\",\r\n                        \"type\": \"esriFieldTypeString\",\r\n                        \"alias\": \"smType\",\r\n                        \"length\": 100\r\n                    }, {\r\n                        \"name\": \"id\",\r\n                        \"type\": \"esriFieldTypeString\",\r\n                        \"alias\": \"id\",\r\n                        \"length\": 100\r\n                    }, {\r\n                        \"name\": \"owner\",\r\n                        \"type\": \"esriFieldTypeString\",\r\n                        \"alias\": \"User\",\r\n                        \"length\": 100\r\n                    }, {\r\n                        \"name\": \"latitude\",\r\n                        \"type\": \"esriFieldTypeDouble\",\r\n                        \"alias\": \"latitude\",\r\n                        \"length\": 1073741822\r\n                    }, {\r\n                        \"name\": \"longitude\",\r\n                        \"type\": \"esriFieldTypeDouble\",\r\n                        \"alias\": \"longitude\",\r\n                        \"length\": 1073741822\r\n                    }, {\r\n                        \"name\": \"title\",\r\n                        \"type\": \"esriFieldTypeString\",\r\n                        \"alias\": \"Title\",\r\n                        \"length\": 1073741822\r\n                    }],\r\n                    \"globalIdField\": \"id\",\r\n                    \"displayField\": \"title\"\r\n                },\r\n                featureSet: {\r\n                    \"features\": [],\r\n                    \"geometryType\": \"esriGeometryPoint\"\r\n                }\r\n            };\r\n            this.infoTemplate = new esri.InfoTemplate();\r\n            this.infoTemplate.setTitle(function (graphic) {\r\n                return _self.options.title;\r\n            });\r\n            this.infoTemplate.setContent(function (graphic) {\r\n                return _self.getWindowContent(graphic, _self);\r\n            });\r\n            this.featureLayer = new esri.layers.FeatureLayer(this.featureCollection, {\r\n                id: this.options.id,\r\n                outFields: [\"*\"],\r\n                infoTemplate: this.infoTemplate,\r\n                visible: true\r\n            });\r\n            this.options.map.addLayer(this.featureLayer);\r\n            connect.connect(this.featureLayer, \"onClick\", lang.hitch(this, function (evt) {\r\n                event.stop(evt);\r\n                var query = new esri.tasks.Query();\r\n                query.geometry = this.pointToExtent(this.options.map, evt.mapPoint, this.options.symbolWidth);\r\n                var deferred = this.featureLayer.selectFeatures(query, esri.layers.FeatureLayer.SELECTION_NEW);\r\n                this.options.map.infoWindow.setFeatures([deferred]);\r\n                this.options.map.infoWindow.show(evt.mapPoint);\r\n                this.options.map.infoWindow.resize(this.options.popupWidth, this.options.popupHeight);\r\n            }));\r\n            this.stats = {\r\n                geoPoints: 0,\r\n                geoNames: 0,\r\n                noGeo: 0\r\n            };\r\n            this.dataPoints = [];\r\n            this.deferreds = [];\r\n            this.geocoded_ids = {};\r\n            this.loaded = true;\r\n        },\r\n        update: function (options) {\r\n            declare.safeMixin(this.options, options);\r\n            this.constructQuery(this.options.searchTerm);\r\n        },\r\n        pointToExtent: function (map, point, toleranceInPixel) {\r\n            var pixelWidth = map.extent.getWidth() / map.width;\r\n            var toleraceInMapCoords = toleranceInPixel * pixelWidth;\r\n            return new esri.geometry.Extent(point.x - toleraceInMapCoords, point.y - toleraceInMapCoords, point.x + toleraceInMapCoords, point.y + toleraceInMapCoords, map.spatialReference);\r\n        },\r\n        clear: function () {\r\n            // cancel any outstanding requests\r\n            this.query = null;\r\n            arr.forEach(this.deferreds, function (def) {\r\n                def.cancel();\r\n            });\r\n            if (this.deferreds) {\r\n                this.deferreds.length = 0;\r\n            }\r\n            // remove existing Photos\r\n            if (this.options.map.infoWindow.isShowing) {\r\n                this.options.map.infoWindow.hide();\r\n            }\r\n            if (this.featureLayer.graphics.length > 0) {\r\n                this.featureLayer.applyEdits(null, null, this.featureLayer.graphics);\r\n            }\r\n            // clear data\r\n            this.stats = {\r\n                geoPoints: 0,\r\n                noGeo: 0,\r\n                geoNames: 0\r\n            };\r\n            this.dataPoints = [];\r\n            this.geocoded_ids = {};\r\n            this.onClear();\r\n        },\r\n        getStats: function () {\r\n            var x = this.stats;\r\n            x.total = this.stats.geoPoints + this.stats.noGeo + this.stats.geoNames;\r\n            return x;\r\n        },\r\n        // Parse Links\r\n        parseURL: function (text) {\r\n            return text.replace(/[A-Za-z]+:\\/\\/[A-Za-z0-9-_]+\\.[A-Za-z0-9-_:%&~\\?\\/.=]+/g, function (url) {\r\n                return '<a target=\"_blank\" href=\"' + url + '\">' + url + '</a>';\r\n            });\r\n        },\r\n        getPoints: function () {\r\n            return this.dataPoints;\r\n        },\r\n        show: function () {\r\n            this.featureLayer.setVisibility(true);\r\n        },\r\n        hide: function () {\r\n            this.featureLayer.setVisibility(false);\r\n        },\r\n        setVisibility: function (val) {\r\n            if (val) {\r\n                this.show();\r\n            } else {\r\n                this.hide();\r\n            }\r\n        },\r\n        // Format Date Object\r\n        formatDate: function (dateObj) {\r\n            if (dateObj) {\r\n                return locale.format(dateObj, {\r\n                    datePattern: \"h:mma\",\r\n                    selector: \"date\"\r\n                }).toLowerCase() + ' &middot; ' + locale.format(dateObj, {\r\n                    datePattern: \"d MMM yy\",\r\n                    selector: \"date\"\r\n                });\r\n            }\r\n        },\r\n        getExtent: function () {\r\n            return esri.graphicsExtent(this.featureLayer.graphics);\r\n        },\r\n        getRadius: function () {\r\n            var map = this.options.map;\r\n            var extent = this.options.map.extent;\r\n            var center = extent.getCenter();\r\n            this.maxRadius = 600;\r\n            var radius = Math.min(this.maxRadius, Math.ceil(esri.geometry.getLength(new esri.geometry.Point(extent.xmin, extent.ymin, map.spatialReference), new esri.geometry.Point(extent.xmax, extent.ymin, map.spatialReference)) * 3.281 / 5280 / 2));\r\n            var dist = (radius) / 2;\r\n            dist = dist * 10;\r\n            dist = (dist * 160.934).toFixed(3);\r\n            dist = parseFloat(dist);\r\n            var geoPoint = new esri.geometry.Point(center.x, center.y, map.spatialReference);\r\n            minPoint = esri.geometry.webMercatorToGeographic(new esri.geometry.Point(geoPoint.x - dist, geoPoint.y - dist, map.spatialReference));\r\n            maxPoint = esri.geometry.webMercatorToGeographic(new esri.geometry.Point(geoPoint.x + dist, geoPoint.y + dist, map.spatialReference));\r\n            return {\r\n                minPoint: minPoint,\r\n                maxPoint: maxPoint\r\n            };\r\n        },\r\n        getWindowContent: function (graphic, _self) {\r\n            var date = new Date(parseInt(graphic.attributes.dateupload * 1000, 10));\r\n            var html = '';\r\n            html += '<div class=\"flContent\">';\r\n            html += '<a tabindex=\"0\" class=\"flImgA\" href=\"' + location.protocol + '//www.flickr.com/photos/' + graphic.attributes.owner + '/' + graphic.attributes.id + '/in/photostream\" target=\"_blank\">';\r\n            html += '<img width=\"' + graphic.attributes.width_s + '\" height=\"' + graphic.attributes.height_s + '\" src=\"' + graphic.attributes.url_s + '\">';\r\n            html += '</a>';\r\n            html += '<h3 class=\"title\">' + graphic.attributes.title + '</h3>';\r\n            html += '<div class=\"username\"><a tabindex=\"0\" href=\"' + location.protocol + '//www.flickr.com/photos/' + graphic.attributes.owner + '/\" target=\"_blank\">' + graphic.attributes.ownername + '</a></div>';\r\n            if (graphic.attributes.description._content) {\r\n                html += '<div class=\"content\">' + graphic.attributes.description._content + '</div>';\r\n            }\r\n            html += '<div class=\"date\">' + this.formatDate(date) + '</div>';\r\n            html += '</div>';\r\n            return html;\r\n        },\r\n        constructQuery: function (searchValue) {\r\n            var search = lang.trim(searchValue);\r\n            if (search.length === 0) {\r\n                search = \"\";\r\n            }\r\n            var radius = this.getRadius();\r\n            this.query = {\r\n                bbox: radius.minPoint.x + \",\" + radius.minPoint.y + \",\" + radius.maxPoint.x + \",\" + radius.maxPoint.y,\r\n                extras: \"description, date_upload, owner_name, geo, url_s\",\r\n                per_page: this.options.limit,\r\n                sort: 'date-posted-desc',\r\n                safe_search: 2,\r\n                content_type: 1,\r\n                tags: search,\r\n                method: \"flickr.photos.search\",\r\n                api_key: this.options.apiKey,\r\n                has_geo: 1,\r\n                page: 1,\r\n                format: \"json\"\r\n            };\r\n            if (this.options.dateTo && this.options.dateFrom) {\r\n                this.query.max_taken_date = Math.round(this.options.dateTo / 1000);\r\n                this.query.min_taken_date = Math.round(this.options.dateFrom / 1000);\r\n            }\r\n            // make the actual Flickr API call\r\n            this.pageCount = 1;\r\n            this.sendRequest(this.baseurl + \"?\" + ioQuery.objectToQuery(this.query));\r\n        },\r\n        sendRequest: function (url) {\r\n            // get the results from Flickr for each page\r\n            var deferred = esri.request({\r\n                url: url,\r\n                handleAs: \"json\",\r\n                timeout: 10000,\r\n                callbackParamName: \"jsoncallback\",\r\n                preventCache: true,\r\n                load: lang.hitch(this, function (data) {\r\n                    if (data.stat !== 'fail') {\r\n                        if (data.photos.photo.length > 0) {\r\n                            this.mapResults(data);\r\n                            // display results for multiple pages\r\n                            if ((this.options.autopage) && (this.options.maxpage > this.pageCount) && (data.photos.page < data.photos.pages) && (this.query)) {\r\n                                this.pageCount++;\r\n                                this.query.page++;\r\n                                this.sendRequest(this.baseurl + \"?\" + ioQuery.objectToQuery(this.query));\r\n                            } else {\r\n                                this.onUpdateEnd();\r\n                            }\r\n                        } else {\r\n                            // No results found, try another search term\r\n                            this.onUpdateEnd();\r\n                        }\r\n                    } else {\r\n                        if (data.code === 100) {\r\n                            console.log(data.code + ' - ' + this.options.title + ': ' + data.message);\r\n                        }\r\n                        // No results found, try another search term\r\n                        this.onUpdateEnd();\r\n                    }\r\n                }),\r\n                error: lang.hitch(this, function (e) {\r\n                    if (deferred.canceled) {\r\n                        console.log('Search Cancelled');\r\n                    } else {\r\n                        console.log('Search error' + \": \" + e.message.toString());\r\n                    }\r\n                    this.onError(e);\r\n                })\r\n            });\r\n            this.deferreds.push(deferred);\r\n        },\r\n        unbindDef: function (dfd) {\r\n            // if deferred has already finished, remove from deferreds array\r\n            var index = arr.indexOf(this.deferreds, dfd);\r\n            if (index === -1) {\r\n                return; // did not find\r\n            }\r\n            this.deferreds.splice(index, 1);\r\n            if (!this.deferreds.length) {\r\n                return 2; // indicates we received results from all expected deferreds\r\n            }\r\n            return 1; // found and removed\r\n        },\r\n\t\tfindWordInText: function (word, text) {\r\n            if(word && text) {\r\n                // text\r\n                var searchString = text.toLowerCase();\r\n                // word\r\n                var badWord = ' ' + word.toLowerCase() + ' ';\r\n                // if found\r\n                if(searchString.indexOf(badWord) > -1) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        mapResults: function (j) {\r\n            var _self = this;\r\n            if (j.error) {\r\n                console.log(\"mapResults error: \" + j.error);\r\n                this.onError(j.error);\r\n                return;\r\n            }\r\n            var b = [];\r\n            var k = j.photos.photo;\r\n            arr.forEach(k, lang.hitch(this, function (result) {\r\n                result.smType = this.options.id;\r\n                result.filterType = 4;\r\n                result.filterContent = 'http://www.flickr.com/photos/' + result.owner + '/' + result.id + '/in/photostream';\r\n                result.filterAuthor = result.owner;\r\n                // eliminate geo photos which we already have on the map\r\n                if (this.geocoded_ids[result.id]) {\r\n                    return;\r\n                }\r\n\t\t\t\t// filter variable\r\n\t\t\t\tvar filter = false, i;\r\n\t\t\t\t// check for filterd user\r\n\t\t\t\tif(_self.options.filterUsers && _self.options.filterUsers.length){\r\n\t\t\t\t\tfor(i = 0; i < _self.options.filterUsers.length; i++){\r\n\t\t\t\t\t\tif(_self.options.filterUsers[i].toString() === result.owner.toString()){\r\n\t\t\t\t\t\t\tfilter = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// check if contains bad word\r\n\t\t\t\tif(!filter && _self.options.filterWords && _self.options.filterWords.length){\r\n\t\t\t\t\tfor(i = 0; i < _self.options.filterWords.length; i++){\r\n\t\t\t\t\t\tif(_self.findWordInText(_self.options.filterWords[i], result.title)){\r\n\t\t\t\t\t\t\tfilter = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(_self.findWordInText( _self.options.filterWords[i], result.description._content)){\r\n\t\t\t\t\t\t\tfilter = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t// if this feature needs to be filtered\r\n\t\t\t\tif(filter){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n                this.geocoded_ids[result.id] = true;\r\n                var geoPoint = null;\r\n                if (result.latitude) {\r\n                    var g = [result.latitude, result.longitude];\r\n                    geoPoint = new esri.geometry.Point(parseFloat(g[1]), parseFloat(g[0]));\r\n                }\r\n                if (geoPoint) {\r\n                    if (isNaN(geoPoint.x) || isNaN(geoPoint.y)) {\r\n                        this.stats.noGeo++;\r\n                    } else {\r\n                        // convert the Point to WebMercator projection\r\n                        var a = new esri.geometry.geographicToWebMercator(geoPoint);\r\n                        // make the Point into a Graphic\r\n                        var graphic = new esri.Graphic(a);\r\n                        graphic.setAttributes(result);\r\n                        b.push(graphic);\r\n                        this.dataPoints.push({\r\n                            geometry: {\r\n                                x: a.x,\r\n                                y: a.y\r\n                            },\r\n                            symbol: esri.symbol.PictureMarkerSymbol(this.featureCollection.layerDefinition.drawingInfo.renderer.symbol),\r\n                            attributes: result\r\n                        });\r\n                        this.stats.geoPoints++;\r\n                    }\r\n                } else {\r\n                    this.stats.noGeo++;\r\n                }\r\n\r\n            }));\r\n            this.featureLayer.applyEdits(b, null, null);\r\n            this.onUpdate();\r\n        },\r\n        onClear: function () {},\r\n        onError: function (info) {\r\n            this.onUpdateEnd();\r\n        },\r\n        onUpdate: function () {},\r\n        onUpdateEnd: function () {\r\n            this.query = null;\r\n        }\r\n    });\r\n    return Widget;\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":18784}]],"length":18784}
{"contributors":[],"silentsave":true,"ts":1357944955520,"patch":[[{"diffs":[[0,"axpage: "],[-1,"6"],[1,"1"],[0,",\r\n     "]],"start1":777,"start2":777,"length1":17,"length2":17}]],"length":18784,"saved":false}
{"ts":1357945356033,"patch":[[{"diffs":[[0,"   maxpage: "],[-1,"1"],[0,",\r\n         "]],"start1":773,"start2":773,"length1":25,"length2":24}]],"length":18783,"saved":false}
{"ts":1357945358559,"patch":[[{"diffs":[[0,"axpage: "],[1,"6"],[0,",\r\n     "]],"start1":777,"start2":777,"length1":16,"length2":17}]],"length":18784,"saved":false}
{"ts":1357945717214,"patch":[[{"diffs":[[0,"topage: "],[-1,"true"],[1,"fa"],[0,",\r\n     "]],"start1":745,"start2":745,"length1":20,"length2":18}]],"length":18782,"saved":false}
{"ts":1357945718154,"patch":[[{"diffs":[[0,"page: fa"],[1,"lse"],[0,",\r\n     "]],"start1":747,"start2":747,"length1":16,"length2":19}]],"length":18785,"saved":false}
{"ts":1357945735419,"patch":[[{"diffs":[[0,"opage: f"],[1,"t"],[0,"alse,\r\n "]],"start1":746,"start2":746,"length1":16,"length2":17}]],"length":18786,"saved":false}
{"ts":1357945737944,"patch":[[{"diffs":[[0,"ge: "],[-1,"ftals"],[1,"tru"],[0,"e,\r\n"]],"start1":749,"start2":749,"length1":13,"length2":11}]],"length":18784,"saved":false}
{"ts":1357945741267,"patch":[[{"diffs":[[0," limit: "],[-1,"10"],[1,"2"],[0,"0,\r\n    "]],"start1":804,"start2":804,"length1":18,"length2":17}]],"length":18783,"saved":false}
{"ts":1357945754920,"patch":[[{"diffs":[[0," limit: "],[-1,"2"],[1,"10"],[0,"0,\r\n    "]],"start1":804,"start2":804,"length1":17,"length2":18}]],"length":18784,"saved":false}
{"ts":1357945824741,"patch":[[{"diffs":[[0,"ge: "],[-1,"this.options.limit"],[1,"1"],[0,",\r\n "]],"start1":11430,"start2":11430,"length1":26,"length2":9}]],"length":18767,"saved":false}
{"ts":1357945843055,"patch":[[{"diffs":[[0,"  per_page: "],[-1,"1"],[1,"this.options.limit"],[0,",\r\n         "]],"start1":11422,"start2":11422,"length1":25,"length2":42}]],"length":18784,"saved":false}
{"contributors":[],"silentsave":true,"ts":1358185449410,"patch":[[{"diffs":[[0,"axpage: "],[-1,"6"],[1,"1"],[0,",\r\n     "]],"start1":777,"start2":777,"length1":17,"length2":17}]],"length":18784,"saved":false}
{"ts":1358185632960,"patch":[[{"diffs":[[0,"   maxpage: "],[-1,"1"],[1,"6"],[0,",\r\n         "]],"start1":773,"start2":773,"length1":25,"length2":25}]],"length":18784,"saved":false}
