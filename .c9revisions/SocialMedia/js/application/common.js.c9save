{"ts":1357945154003,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Set false url param strings to false\r\nfunction setFalseValues(obj) {\r\n    // for each key\r\n    for (var key in obj) {\r\n        // if not a prototype\r\n        if (obj.hasOwnProperty(key)) {\r\n            // if is a false value string\r\n            if (typeof obj[key] === 'string' && (obj[key].toLowerCase() === 'false' || obj[key].toLowerCase() === 'null' || obj[key].toLowerCase() === 'undefined')) {\r\n                // set to false bool type\r\n                obj[key] = false;\r\n            }\r\n            // if it's a true string\r\n            else if (typeof obj[key] === 'string' && obj[key].toLowerCase() === 'true') {\r\n                obj[key] = true;\r\n            }\r\n        }\r\n    }\r\n    // return object\r\n    return obj;\r\n}\r\n\r\n// set application configuration settings\r\nfunction setAppIdSettings(callback) {\r\n    if (configOptions.appid) {\r\n        var requestHandle = esri.request({\r\n            url: configOptions.sharingurl + \"/\" + configOptions.appid + \"/data\",\r\n            content: {\r\n                f: \"json\"\r\n            },\r\n            callbackParamName: \"callback\",\r\n            // on load\r\n            load: function (response) {\r\n                // check for false value strings\r\n                var appSettings = setFalseValues(response.values);\r\n                // set other config options from app id\r\n                dojo.mixin(configOptions, appSettings);\r\n                // callback function\r\n                if (typeof callback === 'function') {\r\n                    // call callback function\r\n                    callback.call(this);\r\n                }\r\n            },\r\n            // on error\r\n            error: function (response) {\r\n                var error = response.message;\r\n                // show error dialog\r\n                var dialog = new dijit.Dialog({\r\n                    title: i18n.viewer.errors.general,\r\n                    content: '<div class=\"padContainer\">' + error + '</div>'\r\n                });\r\n                dialog.show();\r\n            }\r\n        });\r\n    } else {\r\n        // callback function\r\n        if (typeof callback === 'function') {\r\n            // call callback function\r\n            callback.call(this);\r\n        }\r\n    }\r\n}\r\n\r\n// get URL params\r\nfunction configUrlParams() {\r\n    // set url object\r\n    urlObject = esri.urlToObject(document.location.href);\r\n    // make sure it's an object\r\n    urlObject.query = urlObject.query || {};\r\n    // check for false value strings\r\n    urlObject.query = setFalseValues(urlObject.query);\r\n    // mix in settings\r\n    dojo.mixin(configOptions, urlObject.query);\r\n}\r\n\r\n// Set sharing links\r\nfunction setSharing(isPreviewPage) {\r\n    // parameters to share\r\n    var urlParams = ['webmap', 'basemap', 'extent', 'locateName', 'layers', 'youtubeSearch', 'youtubeRange', 'youtubeChecked', 'twitterSearch', 'twitterChecked', 'flickrSearch', 'flickrRange', 'flickrChecked', 'panoramioChecked', 'socialDisplay', 'locatePoint'];\r\n    if (urlParams) {\r\n        configOptions.shareParams = '';\r\n        // for each parameter\r\n        for (var i = 0; i < urlParams.length; i++) {\r\n            // if it's set in configOptions\r\n            if (configOptions.hasOwnProperty(urlParams[i]) && (configOptions[urlParams[i]].toString() !== '') || typeof (configOptions[urlParams[i]]) === 'object') {\r\n                // if it's the first param\r\n                if (i === 0) {\r\n                    configOptions.shareParams = '?';\r\n                } else {\r\n                    configOptions.shareParams += '&';\r\n                }\r\n                // show it\r\n                configOptions.shareParams += urlParams[i] + '=' + encodeURIComponent(configOptions[urlParams[i]].toString());\r\n            }\r\n        }\r\n        // embed path URL\r\n        var pathUrl = urlObject.path.substring(0, urlObject.path.lastIndexOf('/'));\r\n        // Sharing url\r\n        configOptions.shareURL = pathUrl + '/' + configOptions.homePage + configOptions.shareParams;\r\n        // quick embed width\r\n        var embedWidth = configOptions.embedWidth || configOptions.embedSizes.medium.width;\r\n        var embedHeight = configOptions.embedHeight || configOptions.embedSizes.medium.height;\r\n        // iframe code\r\n        configOptions.embedURL = '<iframe frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\" width=\"' + embedWidth + '\" height=\"' + embedHeight + '\" align=\"center\" src=\"' + configOptions.shareURL + '\"></iframe>';\r\n        // preview page\r\n        if (isPreviewPage) {\r\n            // set iframe\r\n            dojo.query('#inputEmbed').attr('value', configOptions.embedURL);\r\n        } else {\r\n            // Quick embed code\r\n            dojo.query('#quickEmbedCode').attr('value', configOptions.embedURL);\r\n            // sharing url\r\n            dojo.query('#inputShare').attr('value', configOptions.shareURL);\r\n        }\r\n    }\r\n}\r\n\r\n// set defaults for config\r\nfunction setDefaultConfigOptions() {\r\n    configOptions.templateVersion = \"3.01\";\r\n    if (!configOptions.portalUrl) {\r\n        configOptions.portalUrl = location.protocol + '//' + location.host + \"/\";\r\n    }\r\n    if (!configOptions.proxyUrl) {\r\n        configOptions.proxyUrl = location.protocol + '//' + location.host + \"/sharing/proxy\";\r\n    }\r\n    if (!configOptions.sharingurl) {\r\n        configOptions.sharingurl = location.protocol + '//' + location.host + \"/sharing/rest/content/items\";\r\n    }\r\n    if (!configOptions.locateName) {\r\n        configOptions.locateName = \"\";\r\n    }\r\n    configOptions.locatorserviceurl = location.protocol + '//geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer';\r\n    configOptions.popupWidth = 290;\r\n    configOptions.popupHeight = 200;\r\n    configOptions.previewSize = {\r\n        \"width\": 900,\r\n            \"height\": 750\r\n    };\r\n    configOptions.embedSizes = {\r\n        \"small\": {\r\n            width: 480,\r\n            height: 360\r\n        },\r\n            \"medium\": {\r\n            width: 700,\r\n            height: 525\r\n        },\r\n            \"large\": {\r\n            width: 940,\r\n            height: 705\r\n        },\r\n            \"maximum\": {\r\n            width: 1900,\r\n            height: 1200\r\n        },\r\n            \"minimum\": {\r\n            width: 350,\r\n            height: 250\r\n        }\r\n    };\r\n    configOptions.socialLayers = [];\r\n    configOptions.previewPage = 'preview.html';\r\n    configOptions.homePage = 'index.html';\r\n    configOptions.flickrID = \"flickr\";\r\n    configOptions.flickrTitle = i18n.viewer.flickr.title;\r\n    configOptions.flickrDescription = i18n.viewer.flickr.description;\r\n    configOptions.flickrIcon = \"images/social/flickr16x16.png\";\r\n    configOptions.flickrSymbol = {\r\n        \"url\": \"images/map/flickr25x30.png\",\r\n            \"width\": \"18.75\",\r\n            \"height\": \"22.5\"\r\n    };\r\n    configOptions.twitterID = \"twitter\";\r\n    configOptions.twitterTitle = i18n.viewer.twitter.title;\r\n    configOptions.twitterDescription = i18n.viewer.twitter.description;\r\n    configOptions.twitterIcon = \"images/social/twitter16x16.png\";\r\n    configOptions.twitterSymbol = {\r\n        \"url\": \"images/map/twitter25x30.png\",\r\n            \"width\": \"18.75\",\r\n            \"height\": \"22.5\"\r\n    };\r\n    configOptions.panoramioID = \"panoramio\";\r\n    configOptions.panoramioTitle = i18n.viewer.panoramio.title;\r\n    configOptions.panoramioDescription = i18n.viewer.panoramio.description;\r\n    configOptions.panoramioIcon = \"images/social/panoramio16x16.png\";\r\n    configOptions.panoramioSymbol = {\r\n        \"url\": \"images/map/panoramio25x30.png\",\r\n            \"width\": \"18.75\",\r\n            \"height\": \"22.5\"\r\n    };\r\n    configOptions.youtubeID = \"youtube\";\r\n    configOptions.youtubeTitle = i18n.viewer.youtube.title;\r\n    configOptions.youtubeDescription = i18n.viewer.youtube.description;\r\n    configOptions.youtubeIcon = \"images/social/youtube16x16.png\";\r\n    configOptions.youtubeSymbol = {\r\n        \"url\": \"images/map/youtube25x30.png\",\r\n            \"width\": \"18.75\",\r\n            \"height\": \"22.5\"\r\n    };\r\n    configOptions.ushahidiID = \"ushahidi\";\r\n    configOptions.ushahidiTitle = i18n.viewer.ushahidi.title;\r\n    configOptions.ushahidiDescription = i18n.viewer.ushahidi.description;\r\n    configOptions.ushahidiIcon = \"images/social/ushahidi16x16.png\";\r\n    configOptions.ushahidiSymbol = {\r\n        \"url\": \"images/map/ushahidi25x30.png\",\r\n            \"width\": \"18.75\",\r\n            \"height\": \"22.5\"\r\n    };\r\n    if (!configOptions.layerInfos) {\r\n        configOptions.layerInfos = [];\r\n    }\r\n    if (configOptions.layers && typeof configOptions.layers === 'string') {\r\n        configOptions.layers = configOptions.layers.split(',');\r\n    } else {\r\n        configOptions.layers = [];\r\n    }\r\n    if (configOptions.locatePoint && typeof configOptions.locatePoint === 'string') {\r\n        configOptions.locatePoint = configOptions.locatePoint.split(',');\r\n    } else {\r\n        configOptions.locatePoint = [];\r\n    }\r\n    if (window.dojoConfig.locale && window.dojoConfig.locale.indexOf(\"ar\") !== -1) {\r\n        //right now checking for Arabic only, to generalize for all RTL languages\r\n        configOptions.isRightToLeft = true; // configOptions.isRightToLeft property setting to true when the locale is 'ar'\r\n    }\r\n    var dirNode = dojo.query('html');\r\n    if (configOptions.isRightToLeft) {\r\n        configOptions.dir = 'rtl';\r\n        dirNode.attr(\"dir\", \"rtl\");\r\n        dirNode.addClass('esriRtl');\r\n    } else {\r\n        configOptions.dir = 'ltr';\r\n        dirNode.attr(\"dir\", \"ltr\");\r\n        dirNode.addClass('esriLtr');\r\n    }\r\n}\r\n\r\n// make sure config options are correct\r\nfunction validateConfig() {\r\n    // Set geometry to HTTPS if protocol is used\r\n    if (configOptions.geometryserviceurl && location.protocol === \"https:\") {\r\n        configOptions.geometryserviceurl = configOptions.geometryserviceurl.replace('http:', 'https:');\r\n    }\r\n    // https locator url\r\n    if (configOptions.locatorserviceurl && location.protocol === \"https:\") {\r\n        configOptions.locatorserviceurl = configOptions.locatorserviceurl.replace('http:', 'https:');\r\n    }\r\n    // https sharing url\r\n    if (configOptions.sharingurl && location.protocol === \"https:\") {\r\n        configOptions.sharingurl = configOptions.sharingurl.replace('http:', 'https:');\r\n    }\r\n    // https portal url\r\n    if (configOptions.portalUrl && location.protocol === \"https:\") {\r\n        configOptions.portalUrl = configOptions.portalUrl.replace('http:', 'https:');\r\n    }\r\n    // set defaults\r\n    esri.arcgis.utils.arcgisUrl = configOptions.sharingurl;\r\n    esri.config.defaults.geometryService = new esri.tasks.GeometryService(configOptions.geometryserviceurl);\r\n    esri.config.defaults.io.proxyUrl = configOptions.proxyUrl;\r\n    esri.config.defaults.io.corsEnabledServers = [location.protocol + '//' + location.host];\r\n    esri.config.defaults.io.alwaysUseProxy = false;\r\n}\r\n\r\n// Canvas detection\r\nfunction isCanvasSupported() {\r\n    var dc = document.createElement('canvas');\r\n    if (!dc.getContext) {\r\n        return 0;\r\n    }\r\n    var c = dc.getContext('2d');\r\n    return typeof c.fillText === 'function' ? 2 : 1;\r\n}\r\n\r\n// Alert box\r\nfunction alertDialog(text) {\r\n    if (configOptions.alertDialog) {\r\n        configOptions.alertDialog.destroy();\r\n    }\r\n    if (configOptions.alertCloseConnect) {\r\n        dojo.disconnect(configOptions.alertCloseConnect);\r\n    }\r\n    var html = '';\r\n    html += '<div class=\"padContainer\">';\r\n    html += '<div>';\r\n    html += text;\r\n    html += '</div>';\r\n    html += '<div class=\"buttons\">';\r\n    html += '<span id=\"closeAlert\" tabindex=\"0\" class=\"mapSubmit\">' + i18n.viewer.general.ok + '</span>';\r\n    html += '</div>';\r\n    html += '</div>';\r\n    var props = {\r\n        style: \"width: 350px\",\r\n        draggable: true,\r\n        modal: false,\r\n        showTitle: true,\r\n        title: i18n.viewer.errors.general,\r\n        content: html\r\n    };\r\n    configOptions.alertDialog = new dijit.Dialog(props, dojo.byId('alertDialog'));\r\n    configOptions.alertDialog.show();\r\n    configOptions.alertCloseConnect = dojo.query(document).delegate(\"#closeAlert\", \"onclick,keyup\", function (event) {\r\n        if (event.type === 'click' || (event.type === 'keyup' && event.keyCode === 13)) {\r\n            configOptions.alertDialog.hide();\r\n        }\r\n    });\r\n}\r\n\r\n// zebra stripe css object\r\nfunction zebraStripe(obj) {\r\n    obj.removeClass(\"stripe\");\r\n    obj.filter(\":nth-child(even)\").addClass(\"stripe\");\r\n}\r\n\r\n// return correct button class\r\nfunction getButtonClass(i, size) {\r\n    if ((i === 1) && (i === size)) {\r\n        return 'buttonSingle';\r\n    } else {\r\n        switch (i) {\r\n            case 1:\r\n                return 'buttonLeft';\r\n            case size:\r\n                return 'buttonRight';\r\n            default:\r\n                return 'buttonCenter';\r\n        }\r\n    }\r\n}\r\n\r\n// create the basemap gallery when active\r\nfunction createBMGallery() {\r\n    var basemapGroup = false;\r\n    if (!configOptions.useArcGISOnlineBasemaps) {\r\n        basemapGroup = {\r\n            title: configOptions.basemapGroupTitle,\r\n            owner: configOptions.basemapGroupOwner\r\n        };\r\n    }\r\n    // basemap gallery\r\n    configOptions.bmDijit = new esri.dijit.BasemapGallery({\r\n        showArcGISBasemaps: configOptions.useArcGISOnlineBasemaps,\r\n        bingMapsKey: configOptions.bingMapsKey,\r\n        basemapsGroup: basemapGroup,\r\n        map: map\r\n    }, dojo.create(\"div\"));\r\n    // on error\r\n    dojo.connect(configOptions.bmDijit, \"onError\", function (msg) {\r\n        console.log(msg);\r\n    });\r\n    // on initial load\r\n    dojo.connect(configOptions.bmDijit, \"onLoad\", function () {\r\n        dojo.query('#map').removeClass('mapLoading');\r\n        selectCurrentBasemap();\r\n        setTimeout(function () {\r\n            // on change\r\n            dojo.connect(configOptions.bmDijit, \"onSelectionChange\", function () {\r\n                baseMapChanged();\r\n            });\r\n        }, 1000);\r\n    });\r\n    // start it up\r\n    configOptions.bmDijit.startup();\r\n}\r\n\r\n// Gets current basemap ID by its title\r\nfunction getBasemapIdTitle(title) {\r\n    var bmArray = configOptions.bmDijit.basemaps;\r\n    if (bmArray) {\r\n        for (var i = 0; i < bmArray.length; i++) {\r\n            if (bmArray[i].title === title) {\r\n                return bmArray[i].id;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n// Gets current basemap id by its Item ID on arcgisonline\r\nfunction getBasemapId(itemId) {\r\n    var bmArray = configOptions.bmDijit.basemaps;\r\n    if (bmArray) {\r\n        for (var i = 0; i < bmArray.length; i++) {\r\n            if (bmArray[i].itemId === itemId) {\r\n                return bmArray[i].id;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n// Selects a basemap by its title\r\nfunction selectCurrentBasemap() {\r\n    var bmid;\r\n    if (configOptions.basemap) {\r\n        bmid = getBasemapId(configOptions.basemap);\r\n        if (bmid) {\r\n            configOptions.bmDijit.select(bmid);\r\n        }\r\n    } else {\r\n        bmid = getBasemapIdTitle(configOptions.basemapTitle);\r\n        if (bmid) {\r\n            configOptions.bmDijit.select(bmid);\r\n        }\r\n    }\r\n}\r\n\r\n// on change of basemap, update selected basemap global variable\r\nfunction baseMapChanged() {\r\n    // get currently selected basemap\r\n    var basemap = configOptions.bmDijit.getSelected();\r\n    if (basemap && basemap.itemId) {\r\n        // update global\r\n        configOptions.basemap = basemap.itemId;\r\n    }\r\n    // set sharing links and embed code\r\n    setSharing();\r\n    hideAllMenus();\r\n}\r\n\r\n// Show spinner on object\r\nfunction showLoading(obj) {\r\n    if (obj) {\r\n        dojo.query('#' + obj).removeClass('LoadingComplete').addClass('Loading').style('display', 'inline-block');\r\n    }\r\n}\r\n\r\n// Set initial extent for future use\r\nfunction setExtentValues() {\r\n    // if extent not set from Url\r\n    if (configOptions.extent && typeof configOptions.extent === 'string') {\r\n        var splitExtent = configOptions.extent.split(',');\r\n        // Loaded from URL\r\n        configOptions.startExtent = new esri.geometry.Extent({\r\n            xmin: parseFloat(splitExtent[0]),\r\n            ymin: parseFloat(splitExtent[1]),\r\n            xmax: parseFloat(splitExtent[2]),\r\n            ymax: parseFloat(splitExtent[3]),\r\n            spatialReference: map.extent.spatialReference\r\n        });\r\n    } else {\r\n        configOptions.startExtent = map.extent;\r\n    }\r\n}\r\n\r\n// update position of menu for right side buttons\r\nfunction updateRightMenuOffset(button, menu) {\r\n    var buttonObj = dojo.query(button)[0];\r\n    var menuObj = dojo.query(menu)[0];\r\n    var position;\r\n    if (buttonObj && menuObj) {\r\n        var offset = dojo.position(buttonObj);\r\n        var vs = dojo.window.getBox();\r\n        if (offset) {\r\n            if (configOptions.isRightToLeft) {\r\n                position = offset.x;\r\n                dojo.style(menuObj, {\r\n                    \"left\": position + 'px'\r\n                });\r\n            } else {\r\n                position = vs.w - (offset.x + offset.w);\r\n                dojo.style(menuObj, {\r\n                    \"right\": position + 'px'\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// update position of menu for left side buttons\r\nfunction updateLeftMenuOffset(button, menu) {\r\n    var btn = dojo.query(button)[0];\r\n    var mnu = dojo.query(menu)[0];\r\n    var vs = dojo.window.getBox();\r\n    var leftOffset;\r\n    if (btn && mnu) {\r\n        var offset = dojo.position(btn);\r\n        if (configOptions.isRightToLeft) {\r\n            leftOffset = vs.w - (offset.x + offset.w);\r\n            dojo.style(mnu, {\r\n                \"right\": leftOffset + 'px'\r\n            });\r\n        } else {\r\n            leftOffset = offset.x;\r\n            dojo.style(mnu, {\r\n                \"left\": leftOffset + 'px'\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// Show dropdown menu\r\nfunction showMenu(menuObj, buttonObj) {\r\n    dojo.query('#mapcon .menuSelected').removeClass('menuSelected');\r\n    if (menuObj) {\r\n        dojo.fx.wipeIn({\r\n            node: menuObj,\r\n            duration: 200\r\n        }).play();\r\n        dojo.query(menuObj).addClass('menuSelected');\r\n    }\r\n    if (buttonObj) {\r\n        dojo.query(buttonObj).addClass('barSelected');\r\n    }\r\n}\r\n\r\n// Hide dropdown menu\r\nfunction hideMenu(menuObj) {\r\n    if (menuObj) {\r\n        dojo.fx.wipeOut({\r\n            node: menuObj,\r\n            duration: 200\r\n        }).play();\r\n        var selectedMenus = dojo.query('#mapcon .menuSelected').removeClass('menuSelected');\r\n        var buttons = dojo.query('#mapcon .barButton');\r\n        for (var i = 0; i < buttons.length; i++) {\r\n            buttons[i].blur();\r\n        }\r\n    }\r\n}\r\n\r\n// Hide layer info boxes\r\nfunction hideLayerInfo() {\r\n    dojo.query('.listMenu ul li .infoHidden').style('display', 'none');\r\n    dojo.query('.listMenu ul li').removeClass('active');\r\n}\r\n\r\n// hide all dropdown menus\r\nfunction hideAllMenus() {\r\n    dojo.query('#topMenuCon .barButton').removeClass('barSelected');\r\n    dojo.query('#mapcon .menuSelected').forEach(function (selectTag) {\r\n        hideMenu(selectTag);\r\n    });\r\n}\r\n\r\n// toggle menu object\r\nfunction toggleMenus(menu) {\r\n    if (menu) {\r\n        // get nodes\r\n        var menuQuery = dojo.query('#dataMenuCon [data-menu=\"' + menu + '\"]')[0];\r\n        var buttonQuery = dojo.query('#topMenuCon [data-menu=\"' + menu + '\"]')[0];\r\n        // remove selected buttons\r\n        dojo.query('#topMenuCon .barButton').removeClass('barSelected');\r\n        if (menuQuery) {\r\n            if (dojo.hasClass(menuQuery, \"menuSelected\")) {\r\n                hideMenu(menuQuery);\r\n            } else {\r\n                hideAllMenus();\r\n                showMenu(menuQuery, buttonQuery);\r\n            }\r\n        }\r\n        hideLayerInfo();\r\n    } else {\r\n        hideAllMenus();\r\n    }\r\n}\r\n\r\n// remove loading spinners\r\nfunction hideLoading(obj, obj2) {\r\n    if (obj) {\r\n        obj.removeClass('cLoading');\r\n    }\r\n    if (obj2) {\r\n        obj2.removeClass('Loading').addClass('LoadingComplete');\r\n    }\r\n}\r\n\r\n// clear popup content, title and features\r\nfunction clearPopupValues() {\r\n    configOptions.customPopup.setContent('');\r\n    configOptions.customPopup.setTitle('');\r\n    configOptions.customPopup.clearFeatures();\r\n}\r\n\r\n// set the order of these functions\r\nfunction setConfigOptions() {\r\n    configUrlParams();\r\n    setDefaultConfigOptions();\r\n    validateConfig();\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":20295}]],"length":20295}
{"contributors":[],"silentsave":true,"ts":1358197550195,"patch":[[{"diffs":[[0,"      \"width\": \""],[-1,"18.75"],[1,"30"],[0,"\",\r\n            "]],"start1":6676,"start2":6676,"length1":37,"length2":34}]],"length":20292,"saved":false}
{"ts":1358197553841,"patch":[[{"diffs":[[0,"     \"height\": \""],[-1,"22.5"],[1,"30"],[0,"\"\r\n    };\r\n    c"]],"start1":6705,"start2":6705,"length1":36,"length2":34}]],"length":20290,"saved":false}
{"ts":1358197558758,"patch":[[{"diffs":[[0,"      \"width\": \""],[-1,"18.75"],[1,"30"],[0,"\",\r\n            "]],"start1":7879,"start2":7879,"length1":37,"length2":34}]],"length":20287,"saved":false}
{"ts":1358197561036,"patch":[[{"diffs":[[0,"     \"height\": \""],[-1,"22.5"],[1,"30"],[0,"\"\r\n    };\r\n    c"]],"start1":7908,"start2":7908,"length1":36,"length2":34}]],"length":20285,"saved":false}
