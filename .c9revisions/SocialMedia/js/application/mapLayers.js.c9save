{"ts":1357932760745,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Folder Layer CheckBoxes\r\nfunction toggleChecked(obj) {\r\n    var list = dojo.query(obj).parent('li');\r\n    if (dojo.hasClass(list[0], \"checked\")) {\r\n        list.removeClass('cLoading');\r\n    } else {\r\n        list.addClass('cLoading');\r\n    }\r\n    dojo.toggleClass(list[0], 'checked');\r\n    setSharing();\r\n}\r\n\r\n// removes layer from list of visible layers\r\nfunction removeFromActiveLayers(layerid) {\r\n    var theIndex = getActiveLayerIndex(layerid);\r\n    for (theIndex; theIndex > -1; theIndex = getActiveLayerIndex(layerid)) {\r\n        configOptions.layers.splice(theIndex, 1);\r\n    }\r\n    setSharing();\r\n}\r\n\r\n// Build a list of layers for the incoming web map.\r\nfunction buildLayersList(layers) {\r\n    //layers  arg is  response.itemInfo.itemData.operationalLayers;\r\n    var layerInfos = [];\r\n    dojo.forEach(layers, function (mapLayer, index) {\r\n        var layerInfo = {};\r\n        if (mapLayer.featureCollection && mapLayer.type !== \"CSV\") {\r\n            if (mapLayer.featureCollection.showLegend === true) {\r\n                dojo.forEach(mapLayer.featureCollection.layers, function (fcMapLayer) {\r\n                    if (fcMapLayer.showLegend !== false) {\r\n                        layerInfo = {\r\n                            \"layer\": fcMapLayer.layerObject,\r\n                            \"title\": mapLayer.title,\r\n                            \"defaultSymbol\": false\r\n                        };\r\n                        if (mapLayer.featureCollection.layers.length > 1) {\r\n                            layerInfo.title += \" - \" + fcMapLayer.layerDefinition.name;\r\n                        }\r\n                        layerInfos.push(layerInfo);\r\n                    }\r\n                });\r\n            }\r\n        } else if (mapLayer.showLegend !== false && mapLayer.layerObject) {\r\n            var showDefaultSymbol = false;\r\n            if (mapLayer.layerObject.version < 10.1 && (mapLayer.layerObject instanceof esri.layers.ArcGISDynamicMapServiceLayer || mapLayer.layerObject instanceof esri.layers.ArcGISTiledMapServiceLayer)) {\r\n                showDefaultSymbol = true;\r\n            }\r\n            layerInfo = {\r\n                \"layer\": mapLayer.layerObject,\r\n                \"title\": mapLayer.title,\r\n                \"defaultSymbol\": showDefaultSymbol\r\n            };\r\n            //does it have layers too? If so check to see if showLegend is false\r\n            if (mapLayer.layers) {\r\n                var hideLayers = dojo.map(dojo.filter(mapLayer.layers, function (lyr) {\r\n                    return (lyr.showLegend === false);\r\n                }), function (lyr) {\r\n                    return lyr.id;\r\n                });\r\n                if (hideLayers.length) {\r\n                    layerInfo.hideLayers = hideLayers;\r\n                }\r\n            }\r\n            layerInfos.push(layerInfo);\r\n        }\r\n    });\r\n    return layerInfos;\r\n}\r\n\r\n// change active layers\r\nfunction getActiveLayerIndex(layerid) {\r\n    var indexNum = dojo.indexOf(configOptions.layers, layerid);\r\n    return indexNum;\r\n}\r\n\r\n// adds layer to list of visible layers\r\nfunction addToActiveLayers(layerid) {\r\n    var theIndex = getActiveLayerIndex(layerid);\r\n    if (theIndex === -1) {\r\n        configOptions.layers.push(layerid);\r\n    }\r\n    setSharing();\r\n}\r\n\r\n// layers ui\r\nfunction configureLayerUI() {\r\n    dojo.query(document).delegate(\"#layersList li:not(.cLoading) .toggle\", \"onclick,keyup\", function (event) {\r\n        if (event.type === 'click' || (event.type === 'keyup' && event.keyCode === 13)) {\r\n            toggleChecked(this);\r\n            var changeMapVal = dojo.query(this).parent('li').attr('data-layer')[0];\r\n            var splitVals = changeMapVal.split(',');\r\n            if (splitVals) {\r\n                for (var i = 0; i < splitVals.length; i++) {\r\n                    toggleMapLayer(splitVals[i]);\r\n                }\r\n            }\r\n            hideLoading(dojo.query('#layersList li[data-layer*=\"' + changeMapVal + '\"]'));\r\n        }\r\n    });\r\n\r\n    // ToolTips\r\n    dojo.query(document).delegate(\".listMenu ul li .cBinfo\", \"onclick,keyup\", function (event) {\r\n        if (event.type === 'click' || (event.type === 'keyup' && event.keyCode === 13)) {\r\n            var toolTip = dojo.query(this).parent('li').children('.infoHidden');\r\n            dojo.query('.listMenu ul li .cBinfo').removeClass('cBinfoAnim');\r\n            if (toolTip[0]) {\r\n                if (toolTip.style('display')[0] === 'none') {\r\n                    dojo.query('.infoHidden').style('display', 'none');\r\n                    dojo.query('.listMenu ul li').removeClass('active');\r\n                    dojo.query(this).parent('li').addClass('active');\r\n                    toolTip.style('display', 'block');\r\n                    dojo.query(this).addClass('cBinfoAnim');\r\n                } else {\r\n                    toolTip.style('display', 'none');\r\n                    dojo.query(this).parent('li').removeClass('active');\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    // Close Menus\r\n    dojo.query(document).delegate(\".slideMenu .menuClose .closeMenu\", \"onclick,keyup\", function (event) {\r\n        hideAllMenus();\r\n    });\r\n\r\n    // Close ToolTips\r\n    dojo.query(document).delegate(\".listMenu ul li .ihClose\", \"onclick,keyup\", function (event) {\r\n        hideLayerInfo();\r\n    });\r\n\r\n    // config settings\r\n    dojo.query(document).delegate(\".listMenu ul li .cBconfig\", \"onclick,keyup\", function (event) {\r\n        if (event.type === 'click' || (event.type === 'keyup' && event.keyCode === 13)) {\r\n            hideLayerInfo();\r\n            dojo.query('.listMenu ul li .cBconfig').removeClass('cBconfigAnim');\r\n            var parentLi = dojo.query(this).parent('li').attr('data-layer')[0];\r\n            var panelObj = dojo.query('#settingsDialog .cfgPanel[data-layer=' + parentLi + ']');\r\n            var panelBtn = dojo.query('#cfgMenu .mapButton[data-layer=' + parentLi + ']');\r\n            dojo.query('#cfgMenu span').removeClass('buttonSelected');\r\n            panelBtn.addClass('buttonSelected');\r\n            configOptions.customPopup.hide();\r\n            dojo.query(this).addClass('cBconfigAnim');\r\n            dojo.query(\"#settingsDialog .cfgPanel\").style('display', 'none');\r\n            panelObj.style('display', 'block');\r\n            dojo.query('#collapseIcon').removeClass('iconDown');\r\n            dojo.query('#settingsDialog .dijitDialogPaneContent').style('display', 'block');\r\n            if (!configOptions.settingsDialog.get('open')) {\r\n                configOptions.settingsDialog.show();\r\n            } else if (configOptions.currentSettingsTab === parentLi) {\r\n                configOptions.settingsDialog.hide();\r\n            }\r\n            configOptions.currentSettingsTab = parentLi;\r\n        }\r\n    });\r\n}\r\n\r\n// toggle map layer on and off\r\nfunction toggleMapLayer(layerid) {\r\n    var layer = map.getLayer(layerid);\r\n    if (layer) {\r\n        //if visible hide the layer\r\n        if (layer.visible === true) {\r\n            layer.hide();\r\n            removeFromActiveLayers(layerid);\r\n        }\r\n        //otherwise show and add to layers\r\n        else {\r\n            layer.show();\r\n            addToActiveLayers(layerid);\r\n        }\r\n    }\r\n}\r\n\r\nfunction addLayerToUI(layerToAdd, index) {\r\n    // each layer\r\n    var layerClass;\r\n    // URL layers variable\r\n    var urlLayers = false;\r\n    // if visible layers set in URL\r\n    if (urlObject.query.hasOwnProperty('layers')) {\r\n        urlLayers = true;\r\n    }\r\n    // generate layer html\r\n    var html = '';\r\n    // if layer object\r\n    if (layerToAdd) {\r\n        // default layer class\r\n        layerClass = 'layer';\r\n        // layer ids\r\n        var dataLayers = '';\r\n        // key variable\r\n        var key;\r\n        if (layerToAdd.featureCollection) {\r\n            // if feature collection layers\r\n            if (layerToAdd.featureCollection.layers) {\r\n                // for each feature collection\r\n                for (var k = 0; k < layerToAdd.featureCollection.layers.length; k++) {\r\n                    // if URL layers set\r\n                    if (urlLayers) {\r\n                        // set layer visibility to false\r\n                        layerToAdd.featureCollection.layers[k].visibility = false;\r\n                        map.getLayer(layerToAdd.featureCollection.layers[k].id).hide();\r\n                        // for each visible layer array item\r\n                        for (key in configOptions.layers) {\r\n                            // if current layer ID matches visible layer item\r\n                            if (configOptions.layers[key] === layerToAdd.featureCollection.layers[k].id) {\r\n                                // set visibility to true\r\n                                layerToAdd.featureCollection.layers[k].visibility = true;\r\n                                map.getLayer(layerToAdd.featureCollection.layers[k].id).show();\r\n                            }\r\n                        }\r\n                    }\r\n                    // if layer visibility is true\r\n                    if (layerToAdd.featureCollection.layers[k].visibility === true) {\r\n                        // set layer class to checked\r\n                        layerClass = 'layer checked';\r\n                        // add to active layers array\r\n                        addToActiveLayers(layerToAdd.featureCollection.layers[k].id);\r\n                    }\r\n                    // data layer attrubute\r\n                    dataLayers += layerToAdd.featureCollection.layers[k].id;\r\n                    // if not last feature collection add comma for splitting\r\n                    if (k !== (layerToAdd.featureCollection.layers.length - 1)) {\r\n                        dataLayers += \",\";\r\n                    }\r\n                }\r\n            }\r\n            // csv\r\n            else {\r\n                // if URL layers set\r\n                if (urlLayers) {\r\n                    map.getLayer(layerToAdd.id).hide();\r\n                    layerToAdd.visibility = false;\r\n                    // for each visible layer array item\r\n                    for (key in configOptions.layers) {\r\n                        // if current layer ID matches visible layer item\r\n                        if (configOptions.layers[key] === layerToAdd.id) {\r\n                            // set visibility to true\r\n                            layerToAdd.visibility = true;\r\n                            map.getLayer(layerToAdd.id).show();\r\n                        }\r\n                    }\r\n                }\r\n                // if layer visibility is true\r\n                if (layerToAdd.visibility === true) {\r\n                    // set layer class to checked\r\n                    layerClass = 'layer checked';\r\n                    // add to active layers array\r\n                    addToActiveLayers(layerToAdd.id);\r\n                }\r\n                // data layer attrubute\r\n                dataLayers += layerToAdd.id;\r\n            }\r\n        } else {\r\n            // if URL layers set\r\n            if (urlLayers) {\r\n                layerToAdd.visibility = false;\r\n                map.getLayer(layerToAdd.id).hide();\r\n                // for each visible layer array item\r\n                for (key in configOptions.layers) {\r\n                    // if current layer ID matches visible layer item\r\n                    if (configOptions.layers[key] === layerToAdd.id) {\r\n                        // set visibility to true\r\n                        layerToAdd.visibility = true;\r\n                        map.getLayer(layerToAdd.id).show();\r\n                    }\r\n                }\r\n            }\r\n            // if layer visibility is true\r\n            if (layerToAdd.visibility === true) {\r\n                // set layer class to checked\r\n                layerClass = 'layer checked';\r\n                // add to active layers array\r\n                addToActiveLayers(layerToAdd.id);\r\n            }\r\n            // data layer attrubute\r\n            dataLayers += layerToAdd.id;\r\n        }\r\n        // Set data layers\r\n        layerToAdd.dataLayers = dataLayers;\r\n        // compose html list string\r\n        html += '<li class=\"' + layerClass + '\" data-layer=\"' + dataLayers + '\">';\r\n        html += '<div class=\"cover\"></div>';\r\n        html += '<span tabindex=\"0\" class=\"cBinfo\" title=\"' + i18n.viewer.layer.information + '\"></span>';\r\n        html += '<span tabindex=\"0\" class=\"toggle cBox\"></span>';\r\n        html += '<span tabindex=\"0\" class=\"toggle cBtitle\" title=\"' + layerToAdd.title + '\">' + layerToAdd.title.replace(/[\\-_]/g, \" \") + '</span>';\r\n        html += '<div class=\"clear\"></div>';\r\n        html += '<div class=\"infoHidden\">';\r\n        html += '<div title=\"' + i18n.viewer.general.close + '\" class=\"ihClose\"></div>';\r\n        if (layerToAdd.resourceInfo) {\r\n            html += '<div class=\"infoHiddenScroll\">';\r\n            if (layerToAdd.resourceInfo.serviceDescription || layerToAdd.resourceInfo.description) {\r\n                if (layerToAdd.resourceInfo.serviceDescription) {\r\n                    html += unescape(layerToAdd.resourceInfo.serviceDescription);\r\n                }\r\n                if (layerToAdd.resourceInfo.description) {\r\n                    html += unescape(layerToAdd.resourceInfo.description);\r\n                }\r\n            }\r\n            html += '</div>';\r\n        } else {\r\n            html += '<div>' + i18n.viewer.errors.nodesc + '</div>';\r\n        }\r\n        html += '<div class=\"transSlider\"><span class=\"transLabel\">' + i18n.viewer.layer.transparency + '</span><span id=\"layerSlider' + index + '\" data-layer-id=\"' + dataLayers + '\" class=\"uiSlider slider\"></span></div>';\r\n        html += '</div>';\r\n    }\r\n    html += '</li>';\r\n    // append html\r\n    node = dojo.byId('layersList');\r\n    if (node) {\r\n        dojo.place(html, node, \"first\");\r\n    }\r\n}\r\n\r\nfunction addLayerTransparencySlider(theLayer, index) {\r\n    // if layer object\r\n    if (theLayer) {\r\n        // init sliders\r\n        var slider = new dijit.form.HorizontalSlider({\r\n            name: \"slider\",\r\n            value: parseFloat(theLayer.opacity * 100),\r\n            minimum: 1,\r\n            showButtons: false,\r\n            maximum: 100,\r\n            dataLayers: theLayer.dataLayers,\r\n            discreteValues: 20,\r\n            intermediateChanges: true,\r\n            style: \"width:100px; display:inline-block; *display:inline; vertical-align:middle;\",\r\n            onChange: transparencyChange\r\n        }, \"layerSlider\" + index);\r\n    }\r\n}\r\n\r\n// create layer items\r\nfunction configureLayers() {\r\n    // if operational layers\r\n    if (configOptions.itemLayers) {\r\n        // if operational layers of at least 1\r\n        if (configOptions.itemLayers.length > 0) {\r\n            if (!configOptions.layerInfos) {\r\n                configOptions.layerInfos = [];\r\n            }\r\n            // build layers\r\n            configOptions.layerInfos = configOptions.layerInfos.concat(buildLayersList(configOptions.itemLayers));\r\n            var node;\r\n            if (configOptions.showLegendMenu) {\r\n                node = dojo.byId('legendMenu');\r\n                if (node) {\r\n                    node.innerHTML = '<div class=\"menuClose\"><div class=\"closeButton closeMenu\"></div>' + i18n.viewer.legend.menuTitle + '<div class=\"clear\"></div></div><div class=\"legendMenuCon\"><div class=\"slideScroll\"><div id=\"legendContent\"></div></div></div>';\r\n                }\r\n                // Build Legend\r\n                if (configOptions.layerInfos && configOptions.layerInfos.length > 0) {\r\n                    configOptions.legendDijit = new esri.dijit.Legend({\r\n                        map: map,\r\n                        layerInfos: configOptions.layerInfos\r\n                    }, \"legendContent\");\r\n                    configOptions.legendDijit.startup();\r\n                } else {\r\n                    var legendContentNode = dojo.byId('legendContent');\r\n                    if (legendContentNode) {\r\n                        legendContentNode.innerHTML = i18n.viewer.errors.noLegend;\r\n                    }\r\n                }\r\n            }\r\n            // ADD URL\r\n            node = dojo.byId('layersMenu');\r\n            if (node) {\r\n                node.innerHTML = '<div class=\"menuClose\"><div class=\"closeButton closeMenu\"></div>' + i18n.viewer.layers.menuTitle + '<div class=\"clear\"></div></div><ul class=\"zebraStripes\" id=\"layersList\"></ul>';\r\n            }\r\n            // for each layer\r\n            for (var i = 0; i < configOptions.itemLayers.length; i++) {\r\n                addLayerToUI(configOptions.itemLayers[i], i);\r\n                addLayerTransparencySlider(configOptions.itemLayers[i], i);\r\n            }\r\n            zebraStripe(dojo.query('#layersList li.layer'));\r\n        } else {\r\n            configOptions.showLayersMenu = false;\r\n            configOptions.showLegendMenu = false;\r\n        }\r\n        configOptions.scaleBar = new esri.dijit.Scalebar({\r\n            map: map,\r\n            attachTo: \"bottom-left\",\r\n            scalebarUnit: i18n.viewer.main.scaleBarUnits\r\n        });\r\n        configureLayerUI();\r\n    }\r\n}\r\n\r\n// slidder transparency change\r\nfunction transparencyChange(value) {\r\n    var layerID = this.dataLayers;\r\n    var newValue = (value / 100);\r\n    var splitVals = layerID.split(',');\r\n    if (splitVals) {\r\n        for (var j = 0; j < splitVals.length; j++) {\r\n            var layer = map.getLayer(splitVals[j]);\r\n            if(layer){\r\n                if(layer._fLayers){\r\n                    for (var k = 0; k < layer._fLayers.length; k++) {\r\n                        layer._fLayers[k].setOpacity(newValue);\r\n                    }\r\n                }\r\n                else{\r\n                    layer.setOpacity(newValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}"]],"start1":0,"start2":0,"length1":0,"length2":17695}]],"length":17695}
